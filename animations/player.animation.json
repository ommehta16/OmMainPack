{
	"format_version": "1.8.0",
	"animations": {
		"animation.player.attack.rotations": {
			"loop": true,
			"blend_weight": "v.attack_body_rot_y = math.sin(math.sqrt(v.attack_time) * 360.0) * 11.4591559026; return 1;",
			"bones": {
				"body": {
					"rotation": [ 0, "v.attack_body_rot_y", 0 ]
				},
				"cape": {
					"rotation": [ "0.5*v.attack_body_rot_y", "0.5*v.attack_body_rot_y", "-0.5*v.attack_body_rot_y" ]
				},
				"leftarm": {
					"rotation": [ "v.attack_body_rot_y", 0, 0 ]
				},
				"rightarm": {
					"rotation": [
					"math.sin(1 - (math.pow(1 - math.pow(v.attack_time, 0.85), 3)) * 180.0) * 68.7549354157 + math.sin(math.pow(v.attack_time, 0.85) * 180) * (q.head_x_rotation(0) - 40.1070456592) * 0.75",
					"v.attack_body_rot_y * 2.0",
					"math.sin(v.attack_time * 180.0) * -22.9183118052"
					]
				}
			}
		},
		"animation.player.bob": {
			"loop": true,
			"blend_weight": "1-v.swim_amount",
			"bones": {
				"leftarm": {
					"rotation": [
						"-2.865 * math.cos(q.life_time * 103.2)",
						0.0,
						"-((math.cos(q.life_time * 103.2) * 2.865) + 2.865)"
					]
				},
				"rightarm": {
					"rotation": [
						"2.865 * math.cos(q.life_time * 103.2)",
						0.0,
						"(math.cos(q.life_time * 103.2) * 2.865) + 2.865 * (1-0.75*v.is_holding_spyglass)"
					]
				},
				"leftleg": {
					"rotation": [
						"-0.5 * math.cos(q.life_time * 103.2)",
						0.0,
						0
					]
				},
				"rightleg": {
					"rotation": [
						"0.5 * math.cos(q.life_time * 103.2)",
						0.0,
						0
					]
				}
			}
		},
		"animation.player.bow_equipped": {
			"loop": true,
			"blend_weight": "math.clamp(math.clamp((q.main_hand_item_max_duration - (q.main_hand_item_use_duration - q.frame_alpha + 1.0)) / 10.0, 0.0, 0.25f) * 4, 0, 1)",
			"bones": {
				"leftarm": {
					"rotation": [
						"(1-v.swim_amount) * (-90.0 + q.target_x_rotation - q.is_sneaking * 15.0 - this)",
						"(1-v.swim_amount) * (27.5 + q.target_y_rotation)",
						0.0
					]
				},
				"rightarm": {
					"rotation": [
						"-90.0 * (1 + v.swim_amount) + q.target_x_rotation * (v.swim_amount>0?1-q.is_in_water:1) - q.is_sneaking * 15.0 - this",
						"-5.0 + q.target_y_rotation",
						0.0
					]
				}
			}
		},
		"animation.player.cape": {
			"loop": true,
			"blend_weight": "v.ground_speed = (v.ground_speed ?? q.ground_speed) - 0.07*((v.ground_speed ?? q.ground_speed)-q.ground_speed); return 1;",
			"bones": {
				"cape": {
					"position": [
						0.0,
						"query.get_root_locator_offset('armor_offset.default_neck', 1)",
						0.0
					],
					"rotation": [
						"math.lerp(0.0, -90.0, math.clamp(math.pow(q.is_riding ? v.ground_speed * 0.075: (v.modified_move_speed ?? 0),4),0,3) * math.pow(1+(v.vertical_speed ?? 0) + math.clamp(math.pow(v.vertical_speed ?? 0,4) * 0.25,0,0.5),0.2)) - 6.0 * (1-0.125*math.cos(70*q.life_time))",
						"(q.is_riding ? 360 :q.target_y_rotation) * math.pow(q.ground_speed,0.5) * 0.33 * (v.modified_move_speed ?? 0)",
						"(q.is_riding ? 360 :q.target_y_rotation) * math.pow((1-q.cape_flap_amount) * (v.modified_move_speed ?? q.modified_move_speed),0.5) * (v.modified_move_speed ?? 0)"
					]
				}
			}
		},
		"animation.player.crossbow_equipped": {
			"loop": true,
			"override_previous_animation": true,
			"bones": {
				"leftarm": {
					"rotation": [
						"math.cos(q.life_time * 103.2) * 2.865 + 2.865 + math.lerp(-35.62, -80.0, 1 - v.item_use_normalized)",
						"math.lerp(8, 48, 1 - v.item_use_normalized)",
						"-(math.cos(q.life_time * 103.2) * 2.865 + 2.865)-(math.cos(q.life_time * 103.2 * 0.5) + 1)"
					]
				},
				"rightarm": {
					"rotation": [
						"-3*(math.cos(q.life_time * 103.2) * 2.865 + 2.865) + -45",
						"-45.84",
						"3*(math.cos(q.life_time * 103.2) * 2.865 + 2.865) + math.cos(q.life_time * 103.2 * 0.5) + 1"
					]
				}
			}
		},
		"animation.player.crossbow_hold": {
			"loop": true,
			"blend_weight": "(1-v.swim_amount) * (v.item_time_right_slow ?? 1)",
			"bones": {
				"leftarm": {
					"rotation": [
						"(1 - 0.5 * v.first_person_rotation_factor) * (-93.0 + q.target_x_rotation - q.is_sneaking * 27.0 -this)",
						"(1 - 0.5 * v.first_person_rotation_factor) * (42.0 + math.clamp(q.target_y_rotation, -180.0, 40.0) -this) + 30 * v.first_person_rotation_factor",
						"q.is_sneaking * -15.0"
					]
				},
				"rightarm": {
					"rotation": [
						"(1 - math.clamp(2 * v.first_person_rotation_factor, 0, 1)) * (-93.0 + q.target_x_rotation - q.is_sneaking * 27.0 -this)",
						"(1 - math.clamp(2 * v.first_person_rotation_factor, 0, 1)) * (-10 + math.clamp(q.target_y_rotation, -60.0, 45.0) -this)",
						0.0
					]
				}
			}
		},
		"animation.player.look_at_target.ui": {
			"loop": true,
			"bones": {
				"head": {
					"rotation": [
						"query.target_x_rotation",
						"query.target_y_rotation",
						0.0
					]
				},
				"leftarm": {
					"rotation": [
						"-2.865 * math.cos(q.life_time * 103.2)",
						0.0,
						"-(math.cos(q.life_time * 103.2) * 2.865 + 2.865)"
					]
				},
				"rightarm": {
					"rotation": [
						"2.865 * math.cos(q.life_time * 103.2)",
						0.0,
						"math.cos(q.life_time * 103.2) * 2.865 + 2.865"
					]
				}
			}
		},
		//Code from Java Aspects(Agent Mindstorm - https://mcpedl.com/java-liquids-fire-sounds/) for item positions
		//Code from Java 1.7 Animations v2(ambient - https://mcpedl.com/java-1-7-animations/) for walk animation
		"animation.player.move.arms": {
			//Item animations are ordered 3D stick, flat, perpendicular, banner, pointed dripstone, and totem of undying.
			//Other adjustments to make items not float are also in there
			"loop": true,
			//Most variables are set here
			"blend_weight": "
			v.blocking_time = (q.get_equipped_item_name(0) == 'shield' || q.get_equipped_item_name(1) == 'shield') ? math.clamp((v.blocking_time ?? 0) + (q.blocking ? 0.9*q.delta_time: -0.75*q.delta_time),0,0.125): 0;
			v.block_time_left = q.get_equipped_item_name(1) == 'shield' ? 1-math.clamp(v.blocking_time*8,0,1) : 1;
			v.block_time_right = q.get_equipped_item_name(1) != 'shield' ? 1-math.clamp(v.blocking_time*8,0,1) : 1;

			v.is_flat_right = v.is_holding_right ? q.is_item_name_any('slot.weapon.mainhand', 0, 'minecraft:agent_spawn_egg' ,'minecraft:allay_spawn_egg' ,'minecraft:axolotl_spawn_egg' ,'minecraft:bat_spawn_egg' ,'minecraft:bee_spawn_egg' ,'minecraft:blaze_spawn_egg' ,'minecraft:cat_spawn_egg' ,'minecraft:cave_spider_spawn_egg' ,'minecraft:chicken_spawn_egg' ,'minecraft:cod_spawn_egg' ,'minecraft:cow_spawn_egg' ,'minecraft:creeper_spawn_egg' ,'minecraft:dolphin_spawn_egg' ,'minecraft:donkey_spawn_egg' ,'minecraft:drowned_spawn_egg' ,'minecraft:elder_guardian_spawn_egg' ,'minecraft:enderman_spawn_egg' ,'minecraft:endermite_spawn_egg' ,'minecraft:evoker_spawn_egg' ,'minecraft:fox_spawn_egg' ,'minecraft:frog_spawn_egg' ,'minecraft:ghast_spawn_egg' ,'minecraft:glow_squid_spawn_egg' ,'minecraft:goat_spawn_egg' ,'minecraft:guardian_spawn_egg' ,'minecraft:hoglin_spawn_egg' ,'minecraft:horse_spawn_egg' ,'minecraft:husk_spawn_egg' ,'minecraft:llama_spawn_egg' ,'minecraft:magma_cube_spawn_egg' ,'minecraft:mooshroom_spawn_egg' ,'minecraft:mule_spawn_egg' ,'minecraft:npc_spawn_egg' ,'minecraft:ocelot_spawn_egg' ,'minecraft:panda_spawn_egg' ,'minecraft:parrot_spawn_egg' ,'minecraft:phantom_spawn_egg' ,'minecraft:pig_spawn_egg' ,'minecraft:piglin_spawn_egg' ,'minecraft:piglin_brute_spawn_egg' ,'minecraft:pillager_spawn_egg' ,'minecraft:polar_bear_spawn_egg' ,'minecraft:pufferfish_spawn_egg' ,'minecraft:rabbit_spawn_egg' ,'minecraft:ravager_spawn_egg' ,'minecraft:salmon_spawn_egg' ,'minecraft:sheep_spawn_egg' ,'minecraft:shulker_spawn_egg' ,'minecraft:silverfish_spawn_egg' ,'minecraft:skeleton_spawn_egg' ,'minecraft:skeleton_horse_spawn_egg' ,'minecraft:slime_spawn_egg' ,'minecraft:spawn_egg' ,'minecraft:spider_spawn_egg' ,'minecraft:squid_spawn_egg' ,'minecraft:stray_spawn_egg' ,'minecraft:strider_spawn_egg' ,'minecraft:tadpole_spawn_egg' ,'minecraft:trader_llama_spawn_egg' ,'minecraft:tropical_fish_spawn_egg' ,'minecraft:turtle_spawn_egg' ,'minecraft:vex_spawn_egg' ,'minecraft:villager_spawn_egg' ,'minecraft:vindicator_spawn_egg' ,'minecraft:wandering_trader_spawn_egg' ,'minecraft:warden_spawn_egg' ,'minecraft:witch_spawn_egg' ,'minecraft:wither_skeleton_spawn_egg' ,'minecraft:wolf_spawn_egg' ,'minecraft:zoglin_spawn_egg' ,'minecraft:zombie_spawn_egg' ,'minecraft:zombie_horse_spawn_egg' ,'minecraft:zombie_villager_spawn_egg' ,'minecraft:zombie_pigman_spawn_egg' ,'minecraft:apple' ,'minecraft:baked_potato' ,'minecraft:beef' ,'minecraft:beetroot' ,'minecraft:beetroot_soup' ,'minecraft:bowl' ,'minecraft:bread' ,'minecraft:carrot' ,'minecraft:chicken' ,'minecraft:chorus_fruit' ,'minecraft:cod' ,'minecraft:cooked_beef' ,'minecraft:cooked_chicken' ,'minecraft:cooked_cod' ,'minecraft:cooked_mutton' ,'minecraft:cooked_porkchop' ,'minecraft:cooked_rabbit' ,'minecraft:cooked_salmon' ,'minecraft:cookie' ,'minecraft:dried_kelp' ,'minecraft:enchanted_golden_apple' ,'minecraft:glow_berries' , 'minecraft:goat_horn', 'minecraft:golden_apple' ,'minecraft:golden_carrot' ,'minecraft:melon_slice' ,'minecraft:mushroom_stew' ,'minecraft:mutton' ,'minecraft:poisonous_potato' ,'minecraft:porkchop' ,'minecraft:potato' ,'minecraft:pufferfish' ,'minecraft:rabbit' ,'minecraft:rabbit_stew' ,'minecraft:rotten_flesh' ,'minecraft:salmon' ,'minecraft:spider_eye' ,'minecraft:suspicious_stew' ,'minecraft:sweet_berries' ,'minecraft:tropical_fish' ,'minecraft:arrow' ,'minecraft:bone_meal' ,'minecraft:book' ,'minecraft:clock' ,'minecraft:compass' ,'minecraft:egg' ,'minecraft:empty_map' ,'minecraft:enchanted_book' ,'minecraft:ender_eye' ,'minecraft:ender_pearl' ,'minecraft:experience_bottle' ,'minecraft:filled_map' ,'minecraft:fire_charge' ,'minecraft:firework_rocket' ,'minecraft:flint_and_steel' ,'minecraft:glass_bottle' ,'minecraft:honey_bottle' ,'minecraft:honeycomb' ,'minecraft:lead' ,'minecraft:lingering_potion' ,'minecraft:lodestone_compass' ,'minecraft:name_tag' ,'minecraft:potion' ,'minecraft:recovery_compass' ,'minecraft:shears' ,'minecraft:snowball' ,'minecraft:splash_potion' ,'minecraft:totem_of_undying' ,'minecraft:writable_book' ,'minecraft:chainmail_boots' ,'minecraft:chainmail_chestplate' ,'minecraft:chainmail_helmet' ,'minecraft:chainmail_leggings' ,'minecraft:diamond_boots' ,'minecraft:diamond_chestplate' ,'minecraft:diamond_helmet' ,'minecraft:diamond_horse_armor' ,'minecraft:diamond_leggings' ,'minecraft:elytra' ,'minecraft:golden_boots' ,'minecraft:golden_chestplate' ,'minecraft:golden_helmet' ,'minecraft:golden_horse_armor' ,'minecraft:golden_leggings' ,'minecraft:iron_boots' ,'minecraft:iron_chestplate' ,'minecraft:iron_helmet' ,'minecraft:iron_horse_armor' ,'minecraft:iron_leggings' ,'minecraft:leather_boots' ,'minecraft:leather_chestplate' ,'minecraft:leather_helmet' ,'minecraft:leather_horse_armor' ,'minecraft:leather_leggings' ,'minecraft:netherite_boots' ,'minecraft:netherite_chestplate' ,'minecraft:netherite_helmet' ,'minecraft:netherite_leggings' ,'minecraft:saddle' ,'minecraft:turtle_helmet' ,'minecraft:activator_rail' ,'minecraft:amethyst_cluster' ,'minecraft:armor_stand' ,'minecraft:barrier' ,'minecraft:beetroot_seeds' ,'minecraft:bell' ,'minecraft:brewing_stand' ,'minecraft:brown_mushroom' ,'minecraft:cake' ,'minecraft:campfire' ,'minecraft:cauldron' ,'minecraft:chain' ,'minecraft:comparator' ,'minecraft:coral' ,'minecraft:coral_fan' ,'minecraft:coral_fan_dead' ,'minecraft:crimson_fungus' ,'minecraft:deadbush' ,'minecraft:detector_rail' ,'minecraft:double_plant' ,'minecraft:end_crystal' ,'minecraft:flower_pot' ,'minecraft:frame' ,'minecraft:frog_spawn' ,'minecraft:frogspawn' ,'minecraft:glow_frame' ,'minecraft:glow_lichen' ,'minecraft:golden_rail' ,'minecraft:hanging_roots' ,'minecraft:hopper' ,'minecraft:iron_bars' ,'minecraft:ladder' ,'minecraft:lantern' ,'minecraft:large_amethyst_bud' ,'minecraft:lever' ,'minecraft:light_block' ,'minecraft:medium_amethyst_bud' ,'minecraft:melon_seeds' ,'minecraft:nether_sprouts' ,'minecraft:nether_wart' ,'minecraft:painting' ,'minecraft:pumpkin_seeds' ,'minecraft:rail' ,'minecraft:red_flower' ,'minecraft:red_mushroom' ,'minecraft:redstone' ,'minecraft:redstone_torch' ,'minecraft:repeater' ,'minecraft:sculk_vein' ,'minecraft:sea_pickle' ,'minecraft:seagrass' ,'minecraft:skull' ,'minecraft:small_amethyst_bud' ,'minecraft:soul_campfire' ,'minecraft:soul_lantern' ,'minecraft:soul_torch' ,'minecraft:string' ,'minecraft:sugar_cane' ,'minecraft:tallgrass' ,'minecraft:torch' ,'minecraft:tripwire_hook' ,'minecraft:turtle_egg' ,'minecraft:twisting_vines' ,'minecraft:vine' ,'minecraft:warped_fungus' ,'minecraft:waterlily' ,'minecraft:web' ,'minecraft:weeping_vines' ,'minecraft:wither_rose' ,'minecraft:wheat_seeds' ,'minecraft:yellow_flower' ,'minecraft:acacia_door' ,'minecraft:acacia_sign' ,'minecraft:birch_door' ,'minecraft:birch_sign' ,'minecraft:crimson_door' ,'minecraft:crimson_sign' ,'minecraft:dark_oak_door' ,'minecraft:dark_oak_sign' ,'minecraft:iron_door' ,'minecraft:jungle_door' ,'minecraft:jungle_sign' ,'minecraft:mangrove_door' ,'minecraft:mangrove_sign' ,'minecraft:oak_sign' ,'minecraft:sapling' ,'minecraft:spruce_door' ,'minecraft:spruce_sign' ,'minecraft:warped_door' ,'minecraft:warped_sign' ,'minecraft:wooden_door' ,'minecraft:acacia_boat' ,'minecraft:acacia_chest_boat' ,'minecraft:birch_boat' ,'minecraft:birch_chest_boat' ,'minecraft:chest_minecart' ,'minecraft:command_block_minecart' ,'minecraft:dark_oak_boat' ,'minecraft:dark_oak_chest_boat' ,'minecraft:hopper_minecart' ,'minecraft:jungle_boat' ,'minecraft:jungle_chest_boat' ,'minecraft:mangrove_boat' ,'minecraft:mangrove_chest_boat' ,'minecraft:mangrove_propagule' ,'minecraft:minecart' ,'minecraft:oak_boat' ,'minecraft:oak_chest_boat' ,'minecraft:spruce_boat' ,'minecraft:spruce_chest_boat' ,'minecraft:tnt_minecart' ,'minecraft:bordure_indented_banner_pattern' ,'minecraft:creeper_banner_pattern' ,'minecraft:field_masoned_banner_pattern' ,'minecraft:flower_banner_pattern' ,'minecraft:globe_banner_pattern' ,'minecraft:mojang_banner_pattern' ,'minecraft:piglin_banner_pattern' ,'minecraft:skull_banner_pattern' ,'minecraft:amethyst_shard' ,'minecraft:blaze_powder' ,'minecraft:brick' ,'minecraft:charcoal' ,'minecraft:clay_ball' ,'minecraft:coal' ,'minecraft:cocoa_beans' ,'minecraft:copper_ingot' ,'minecraft:diamond' ,'minecraft:dragon_breath' ,'minecraft:echo_shard' ,'minecraft:emerald' ,'minecraft:feather' ,'minecraft:fermented_spider_eye' ,'minecraft:flint' ,'minecraft:firework_star' ,'minecraft:ghast_tear' ,'minecraft:glistering_melon_slice' ,'minecraft:glow_ink_sac' ,'minecraft:glowstone_dust' ,'minecraft:gold_ingot' ,'minecraft:gold_nugget' ,'minecraft:gunpowder' ,'minecraft:heart_of_the_sea' ,'minecraft:ink_sac' ,'minecraft:iron_ingot' ,'minecraft:iron_nugget' ,'minecraft:lapis_lazuli' ,'minecraft:leather' ,'minecraft:magma_cream' ,'minecraft:nautilus_shell' ,'minecraft:nether_star' ,'minecraft:netherbrick' ,'minecraft:netherite_ingot' ,'minecraft:netherite_scrap' ,'minecraft:paper' ,'minecraft:phantom_membrane' ,'minecraft:popped_chorus_fruit' ,'minecraft:prismarine_crystals' ,'minecraft:prismarine_shard' ,'minecraft:quartz' ,'minecraft:rabbit_foot' ,'minecraft:rabbit_hide' ,'minecraft:raw_copper' ,'minecraft:raw_gold' ,'minecraft:raw_iron' ,'minecraft:scute' ,'minecraft:slime_ball' ,'minecraft:sugar' ,'minecraft:wheat' ,'minecraft:axolotl_bucket' ,'minecraft:bucket' ,'minecraft:cod_bucket' ,'minecraft:lava_bucket' ,'minecraft:milk_bucket' ,'minecraft:powder_snow_bucket' ,'minecraft:pufferfish_bucket' ,'minecraft:salmon_bucket' ,'minecraft:tadpole_bucket' ,'minecraft:tropical_fish_bucket' ,'minecraft:water_bucket' ,'minecraft:disc_fragment_5' ,'minecraft:music_disc_5' ,'minecraft:music_disc_11' ,'minecraft:music_disc_13' ,'minecraft:music_disc_blocks' ,'minecraft:music_disc_cat' ,'minecraft:music_disc_chirp' ,'minecraft:music_disc_far' ,'minecraft:music_disc_mall' ,'minecraft:music_disc_mellohi' ,'minecraft:music_disc_otherside' ,'minecraft:music_disc_pigstep' ,'minecraft:music_disc_stal' ,'minecraft:music_disc_strad' ,'minecraft:music_disc_wait' ,'minecraft:music_disc_ward' ,'minecraft:black_dye' ,'minecraft:blue_dye' ,'minecraft:brown_dye' ,'minecraft:cyan_dye' ,'minecraft:gray_dye' ,'minecraft:green_dye' ,'minecraft:light_blue_dye' ,'minecraft:light_gray_dye' ,'minecraft:lime_dye' ,'minecraft:magenta_dye' ,'minecraft:orange_dye' ,'minecraft:pink_dye' ,'minecraft:purple_dye' ,'minecraft:red_dye' ,'minecraft:white_dye' ,'minecraft:yellow_dye' ,'minecraft:black_candle' ,'minecraft:blue_candle' ,'minecraft:brown_candle' ,'minecraft:candle' ,'minecraft:cyan_candle' ,'minecraft:gray_candle' ,'minecraft:green_candle' ,'minecraft:light_blue_candle' ,'minecraft:light_gray_candle' ,'minecraft:lime_candle' ,'minecraft:magenta_candle' ,'minecraft:orange_candle' ,'minecraft:pink_candle' ,'minecraft:purple_candle' ,'minecraft:red_candle' ,'minecraft:white_candle' ,'minecraft:yellow_candle' ,'minecraft:balloon' ,'minecraft:bleach' ,'minecraft:board' ,'minecraft:chalkboard' ,'minecraft:compound' ,'minecraft:ice_bomb' ,'minecraft:medicine' ,'minecraft:sparkler' ,'minecraft:rapid_fertilizer' ,'minecraft:underwater_torch' ,'minecraft:colored_torch_bp' ,'minecraft:colored_torch_rg' ,'minecraft:acacia_standing_sign' ,'minecraft:acacia_wall_sign' ,'minecraft:birch_standing_sign' ,'minecraft:birch_wall_sign' ,'minecraft:bubble_column' ,'minecraft:crimson_standing_sign' ,'minecraft:crimson_wall_sign' ,'minecraft:darkoak_standing_sign' ,'minecraft:darkoak_wall_sign' ,'minecraft:end_gateway' ,'minecraft:end_portal' ,'minecraft:fire' ,'minecraft:invisible_bedrock' ,'minecraft:kelp' ,'minecraft:reeds' ,'minecraft:jungle_standing_sign' ,'minecraft:jungle_wall_sign' ,'minecraft:lava' ,'minecraft:mangrove_standing_sign' ,'minecraft:mangrove_wall_sign' ,'minecraft:melon_stem' ,'minecraft:piston_arm_collision' ,'minecraft:powered_comparator' ,'minecraft:powered_repeater' ,'minecraft:pumpkin_stem' ,'minecraft:redstone_wire' ,'minecraft:soul_fire' ,'minecraft:spruce_standing_sign' ,'minecraft:spruce_wall_sign' ,'minecraft:standing_sign' ,'minecraft:unlit_redstone_torch' ,'minecraft:wall_banner' ,'minecraft:wall_sign' ,'minecraft:warped_standing_sign' ,'minecraft:warped_wall_sign' ,'minecraft:water');
			v.is_flat_left = v.is_holding_left ? q.is_item_name_any('slot.weapon.offhand', 0, 'minecraft:totem','minecraft:nautilus_shell','minecraft:firework_rocket','minecraft:filled_map','minecraft:arrow');
			v.is_perp_right = v.is_holding_right ? q.is_item_name_any('slot.weapon.mainhand', 0, 'minecraft:bamboo','minecraft:blaze_rod','minecraft:bone','minecraft:diamond_axe','minecraft:diamond_hoe','minecraft:diamond_pickaxe','minecraft:diamond_shovel','minecraft:diamond_sword','minecraft:fishing_rod','minecraft:golden_axe','minecraft:golden_hoe','minecraft:golden_pickaxe','minecraft:golden_shovel','minecraft:golden_sword','minecraft:iron_axe','minecraft:iron_hoe','minecraft:iron_pickaxe','minecraft:iron_shovel','minecraft:iron_sword','minecraft:netherite_axe','minecraft:netherite_hoe','minecraft:netherite_pickaxe','minecraft:netherite_shovel','minecraft:netherite_sword','minecraft:stick','minecraft:stone_axe','minecraft:stone_hoe','minecraft:stone_pickaxe','minecraft:stone_shovel','minecraft:stone_sword','minecraft:wooden_axe','minecraft:wooden_hoe','minecraft:wooden_pickaxe','minecraft:wooden_shovel','minecraft:wooden_sword');
			v.is_perp_left = 0;
			v.is_3D_stick_right = v.is_holding_right ? q.is_item_name_any('slot.weapon.mainhand', 0, 'minecraft:end_rod', 'minecraft:lightning_rod');
			v.is_hover_right = v.is_holding_right ? q.is_item_name_any('slot.weapon.mainhand',0,'minecraft:disc_fragment_5','minecraft:iron_nugget', 'minecraft:gold_nugget', 'minecraft:hanging_roots', 'minecraft:nether_wart', 'minecraft:ink_sac');

			v.item_time_right_slow = math.clamp(v.is_holding_right ? (v.item_time_right_slow ?? 0) + 6*q.delta_time : 0,0,1);
			v.item_time_right = math.clamp(v.is_holding_right ? (v.item_time_right ?? 0) + 12 * q.delta_time : (v.item_time_right ?? 0) - 12 * q.delta_time,0,1);
			v.item_time_left = math.clamp(v.is_holding_left ? (v.item_time_left ?? 0) + 12 * q.delta_time : (v.item_time_left ?? 0) - 12 * q.delta_time,0,1);
			
			v.delta_time = ((v.first_person ?? 0) ? q.delta_time : q.last_frame_time(0));
			t.normalized_vertical_speed = math.clamp(math.pow(math.abs(q.position_delta(1) + 0.0784), 0.225) * 1.175, 0, 0.785); v.vertical_speed = (v.vertical_speed ?? 0) + ((t.normalized_vertical_speed ?? 0) - (v.vertical_speed ?? 0)) * (1 - math.pow((1 - 0.85), v.delta_time / 0.15));
			v.raw_move_speed = math.clamp(math.sqrt(q.position_delta(0) * q.position_delta(0) * (1 - v.vertical_speed) + q.position_delta(2) * q.position_delta(2) * (1 - v.vertical_speed)) * 1.1224341224, 0, 0.1532167643) * 6.5267009427;
			v.modified_move_speed = math.max((v.modified_move_speed ?? q.modified_move_speed) + ((v.raw_move_speed ?? q.modified_move_speed) - (v.modified_move_speed ?? q.modified_move_speed)) * (1 - math.pow((1 - 0.8), (v.delta_time / 0.2))), q.modified_move_speed);
			v.modified_distance_moved = math.max((v.modified_distance_moved ?? q.modified_distance_moved) + (v.modified_move_speed ?? q.modified_move_speed) * v.delta_time * 20, q.modified_distance_moved);
			v.tcos1 = (math.cos((v.modified_distance_moved ?? q.modified_distance_moved) * 38.1971863421) * math.max(v.modified_move_speed + (q.yaw_speed/900) * math.cos(q.life_time*360), q.modified_move_speed + (q.yaw_speed/900) * math.cos(q.life_time*360)) / v.gliding_speed_value) * 57.2957795131;
			return 1;",
			"bones": {
				"leftarm": {
					"rotation": [
						"v.tcos1 * (1-v.swim_amount)",
						0.0,
						0.0
					]
				},
				"rightarm": {
					"rotation": [
						"-v.tcos1 * (!v.is_holding_spyglass) * (1-v.swim_amount)",
						0,
						0.0
					]
				},
				"leftitem": {
					"rotation": [
						"(v.is_flat_left * 13.0) + (v.is_perp_left * 18.5) + (q.get_equipped_item_name(1) == 'totem_of_undying' ? 13.0)",
						"(v.is_flat_left * 14.5) + (v.is_perp_left * -2.4) + (q.get_equipped_item_name(1) == 'totem_of_undying' ? -19.0)",
						"(v.is_flat_left * -11.5)+ (v.is_perp_left * 3.85) + (q.get_equipped_item_name(1) == 'totem_of_undying' ? 1.0)"
					],
					"position": [
						"(v.is_flat_left * 0.9) + (v.is_perp_left * 0.3) + (q.get_equipped_item_name(1) == 'totem_of_undying' ? -0.59)",
						"(v.is_flat_left * 0.0) + (v.is_perp_left * 0.8) + (q.get_equipped_item_name(1) == 'totem_of_undying' ? -0.09)",
						"(v.is_flat_left * -0.6)+(v.is_perp_left * -1.4) + (q.get_equipped_item_name(1) == 'totem_of_undying' ? -1.55)"
					]
				},
				"rightitem": {
					"rotation": [
						"(v.is_3D_stick_right * 0) + (v.is_flat_right * 13.0) + (v.is_perp_right * 18.5) + (q.get_equipped_item_name(0) == 'banner' ? 17.5)",
						"(v.is_3D_stick_right * 0) + (v.is_flat_right * 14.5) + (v.is_perp_right * -2.4) + (q.get_equipped_item_name(0) == 'banner' ? -10.0)",
						"(v.is_3D_stick_right * 0) + (v.is_flat_right * -11.5)+ (v.is_perp_right * 3.85) + (q.get_equipped_item_name(0) == 'banner' ? -15.0) + (q.get_equipped_item_name == 'pointed_dripstone' ? 90.0)"
					],
					"position": [
						"(v.is_flat_right * -1.18) + (v.is_perp_right * -0.1) +(q.get_equipped_item_name(0) == 'banner' ? -4)   +(q.get_equipped_item_name == 'pointed_dripstone' ? 3)",
						"(q.is_item_name_any('slot.weapon.mainhand',0,'minecraft:cauldron','minecraft:flower_pot','') ? -6) + (v.is_3D_stick_right * 1) + (v.is_flat_right * -0.39) + (v.is_perp_right * 0.8)  +(q.get_equipped_item_name(0) == 'banner' ? 1.1)  + (q.get_equipped_item_name == 'pointed_dripstone' ? -2)",
						"(v.is_hover_right*2) + (v.is_flat_right * -0.11) + (v.is_perp_right * -1.4) + (q.get_equipped_item_name(0) == 'banner' ? -0.5)+ (q.get_equipped_item_name(0) == 'pointed_dripstone' ? -2) + 2*(q.get_equipped_item_name=='hanging_roots')"
					],
					"scale": "1.0 + (q.get_equipped_item_name(0) == 'banner' || q.get_equipped_item_name(0) == 'skull' ? 0.3) + (q.get_equipped_item_name(0) == 'pointed_dripstone' ? -0.25) + (q.get_equipped_item_name(0) == 'skull:5' ? 1) - (q.get_equipped_item_name == 'bed' ? 0.9)"
				}
			}
		},
		"animation.player.move.legs" : {
			"loop" : true,
			"bones" : {
				"leftleg" : {
					"rotation" : [ "v.tcos1 * -1.4", 0.0, 0.0 ]
				},
				"rightleg" : {
					"rotation" : [ "v.tcos1 * 1.4", 0.0, 0.0 ]
				}
			}
		},	
		//move is over
		"animation.player.holding": {
			"loop": true,
			"blend_weight": "1-v.swim_amount",
			"bones": {
				"leftarm": {
					"rotation": [
						"v.item_time_left * (-this * 0.5 - 18.0 * (v.block_time_right -q.is_using_item * math.clamp(math.clamp((q.main_hand_item_max_duration - (q.main_hand_item_use_duration - q.frame_alpha + 1.0)) / 10.0, 0.0, 0.25f) * 4, 0, 1)))",
						0.0,
						0.0
					]
				},
				"rightarm": {
					"rotation": [
						"v.item_time_right * (v.item_use_normalized <= 0) * (-this * 0.5 - 18.0 * v.block_time_left) ",
						0.0,
						0.0
					]
				},
				"leftitem": {
					"scale": [
						1,
						1,
						"q.get_equipped_item_name(1) == 'trident' && q.is_using_item ? -1 : 1"
					]
				}
			}
		},
		"animation.player.riding.arms": {
			"loop": true,
			"bones": {
				"leftarm": {
					"rotation": [
						-36.0,
						0.0,
						0.0
					]
				},
				"rightarm": {
					"rotation": [
						"-36.0 * (1-v.is_holding_spyglass)",
						0.0,
						0.0
					]
				}
			}
		},
		"animation.player.shield_block_main_hand": {
			"loop": true,
			"blend_weight": "1-v.block_time_right",
			"bones": {
				"rightarm": {
					"rotation": [
						-20.0,
						-30.0,
						-15.0
					]
				},
				"rightitem": {
					"position": [
						-1.0,
						-3.0,
						0.0
					],
					"rotation": [
						0.0,
						-60.0,
						-55.0
					]
				}
			}
		},
		"animation.player.shield_block_off_hand": {
			"loop": true,
			"blend_weight": "1-v.block_time_left",
			"bones": {
				"leftarm": {
					"rotation": [
						-20.0,
						30.0,
						15.0
					]
				},
				"leftitem": {
					"position": [
						"1 + q.item_is_charged * 1.5",
						"-3.0 + q.item_is_charged",
						-1.0
					],
					"rotation": [
						"q.item_is_charged * 30.0",
						"70.0 - q.item_is_charged * 60.0",
						"55.0 - q.item_is_charged * 15.0"
					]
				}
			}
		},
		"animation.player.sleeping": {
			"loop": true,
			"bones": {
				"head": {
					"rotation": [
						"30.0 - this",
						"-this",
						"-this"
					]
				},
				"root": {
					"position": [
						"24.0 * math.cos(query.body_y_rotation) * math.cos(query.sleep_rotation) - 24.0 * math.sin(query.body_y_rotation) * math.sin(query.sleep_rotation)",
						0.0,
						"24.0 * math.cos(query.body_y_rotation) * math.sin(query.sleep_rotation) + 24.0 * math.sin(query.body_y_rotation) * math.cos(query.sleep_rotation)"
					],
					"rotation": [
						-90.0,
						"270.0 - query.sleep_rotation - query.body_y_rotation",
						0.0
					]
				}
			}
		},
		"animation.player.sneaking": {
			"loop": true,
			"bones": {
				"body": {
					"position": [0, -2.34037, 0.64014]
				},
				"head": {
					"position": [0, 0, 0]
				},
				"leftArm": {
					"position": [0, 0, -1.1],
					"rotation": [-5.7, 0, 0]
				},
				"leftLeg": {
					"rotation": [-28, 0, 0]
				},
				"rightArm": {
					"position": [0, 0, -1.1],
					"rotation": [-5.7, 0, 0]
				},
				"rightLeg": {
					"rotation": [-28, 0, 0]
				},
				"root": {
					"rotation": ["28.0 - this", 0, 0],
					"position": [0, -0.25, 7.25]
				},
				"waist": {
					"rotation": [0, 0, 0],
					"position": [0, -1.11884, -0.024]
				}
			}
		},
		"animation.player.swim": {
			"loop": true,
			"blend_weight": "v.swim_amount",
			"animation_length": 1.3,
			"anim_time_update": "math.sqrt(math.pow(0.7*q.modified_distance_moved,2) + math.pow(3*q.position(1),2)) * 0.05",
			"override_previous_animation": false,
			"bones": {
				"leftarm": {
					"rotation": {
						"0": [
							0,																						//rot 0
							"math.lerprotate(0,180.0001,v.swim_amount)",											//rot 180
							"math.lerprotate(0,180.0001,v.swim_amount)"												//rot 180
						],
						"0.7": [
							0,																						//rot 0
							"math.lerprotate(0,180.0001,v.swim_amount)",											//rot 180
							"math.lerprotate(0,287.2,v.swim_amount)"												//rot 287.2
						],
						"1.1": [
							"math.lerprotate(0,90.0,v.swim_amount)",												//rot 90
							"math.lerprotate(0,180.0001,v.swim_amount)",											//rot 180
							"math.lerprotate(0,180.0001,v.swim_amount)"												//rot 180
						],
						"1.3": [
							0,																						//rot 0
							"math.lerprotate(0,180.0001,v.swim_amount)",											//rot 180
							"math.lerprotate(0,180.0001,v.swim_amount)"												//rot 180
						]
					}
				},
				"rightarm": {
					"rotation": {
						"0": [
							"math.lerprotate(0, v.is_holding_spyglass ? 190.0 , v.swim_amount)",					//rot 0
							"math.lerprotate(0, v.is_holding_spyglass ? 0  : v.is_bow * 179.9999 , v.swim_amount)",	//rot 180
							"-math.lerprotate(0,v.is_holding_spyglass ? -20 : v.is_bow * 180.0001 , v.swim_amount)"	//rot -180
						],
						"0.7": [
							"math.lerprotate(0, v.is_holding_spyglass ? 190 , v.swim_amount)",						//rot 0
							"math.lerprotate(0, v.is_holding_spyglass ? 0  : v.is_bow * 179.9999 , v.swim_amount)",	//rot 180
							"-math.lerprotate(0,v.is_holding_spyglass ? -20 : v.is_bow * 287.2 , v.swim_amount)"	//rot -287.2
						],
						"1.1": [
							"math.lerprotate(0, v.is_holding_spyglass ? 190: v.is_bow * 90.0 , v.swim_amount)",		//rot 90
							"math.lerprotate(0, v.is_holding_spyglass ? 0  : v.is_bow * 179.9999 , v.swim_amount)",	//rot 180
							"-math.lerprotate(0, v.is_holding_spyglass ? -20 : v.is_bow * 180.0001 , v.swim_amount)"//rot -180
						],
						"1.3": [
							"math.lerprotate(0, v.is_holding_spyglass ? 190 , v.swim_amount)",						//rot 0
							"math.lerprotate(0, v.is_holding_spyglass ? 0  : v.is_bow * 179.9999 , v.swim_amount)",	//rot 180
							"-math.lerprotate(0, v.is_holding_spyglass ? -20 : v.is_bow * 180.0001 , v.swim_amount)"//rot -180
						]
					}
				},
				"root": {
					"position": [
						"v.is_bow = q.get_equipped_item_name(0) != 'bow' || !(q.main_hand_item_use_duration > 0);
						return 0;",
						"(math.sin(q.target_x_rotation*q.is_in_water) * 17.0 + 5.0) * v.swim_amount",
						"(math.cos(q.target_x_rotation*q.is_in_water) * 17.0) * v.swim_amount"
					],
					"rotation": [
						"(90 + q.target_x_rotation * q.is_in_water)",
						0.0,
						0.0
					]
				}
			}
		},
		"animation.player.swim.legs": {
			"loop": true,
			"override_previous_animation": true,
			"blend_weight": "v.swim_amount",
			"bones": {
				"leftleg": {
					"rotation": [
						"math.cos(math.sqrt(math.pow(q.modified_distance_moved, 2) + math.pow(3 * q.position(1), 2)) * 0.33 * 25 * math.pi + 180.0) * 17.2",
						0.0,
						0.0
					]
				},
				"rightleg": {
					"rotation": [
						"math.cos(math.sqrt(math.pow(q.modified_distance_moved, 2) + math.pow(3 * q.position(1), 2)) * 0.33 * 25 * math.pi) * 17.2",
						0.0,
						0.0
					]
				}
			}
		}
	}
}