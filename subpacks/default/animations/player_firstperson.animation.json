{
	"format_version": "1.18.0",
	"animations": {
		"animation.player.first_person.attack_rotation": {
			"loop": true,
			"bones": {
				"rightarm": {
					"position": [
						"q.get_equipped_item_name == '' ? math.sin(math.pow(variable.attack_time, 0.5) * 180.0) * -2.6",
						"q.get_equipped_item_name == '' ? 1.5*math.pow(math.sin(v.first_person_rotation_factor * 90),2) + math.sin(math.pow(variable.attack_time, 0.5) * 360.0) * 6.1: -(10 + 15 * (q.get_equipped_item_name != 'trident')) * math.pow(math.sin(v.first_person_rotation_factor * 90),2)",
						"q.get_equipped_item_name == '' ? math.sin(math.pow(variable.attack_time, 1.1) * 180.0) * 3.1"
					],
					"rotation": [
						"q.get_equipped_item_name == '' ? math.sin(math.pow(variable.attack_time, 0.45) * 180.0) * -56.0",
						"q.get_equipped_item_name == '' ? math.sin(math.pow(variable.attack_time, 0.5) * 180.0) * 45.0",
						"q.get_equipped_item_name == '' ? math.sin(math.pow(variable.attack_time, 0.3) * 180.0) * 22.5"
					]
				}
			}
		},
		"animation.player.first_person.attack_rotation_item": { 
			"loop": true,
			"override_previous_animation": true,
			"bones": {
				"rightitem": {
					"rotation": [
						"(math.sin(v.first_person_rotation_factor * math.pow(1.0 - math.pow(v.attack_time,0.85),2) * 200.0) * 20)",
						"0.75*math.sin(v.first_person_rotation_factor * math.pow(1.0 - math.pow(v.attack_time,0.85),2) * 200.0) * -48",
						"math.sin(v.first_person_rotation_factor * math.pow(1.0 - math.pow(v.attack_time,0.85),2) * 200.0) * (-70 - 10 * (q.get_equipped_item_name == 'trident'))"
					],
					"position": [
						"(!q.is_item_name_any('slot.weapon.mainhand','minecraft:trident','minecraft:spyglass'))*(math.clamp(-20 * math.sin(v.first_person_rotation_factor * math.pow(v.attack_time,0.85) * 112.0), 12, 999.0) * math.sin(v.first_person_rotation_factor * math.pow(v.attack_time,0.85) * 112.0))",
						"(!q.is_item_name_any('slot.weapon.mainhand','minecraft:trident','minecraft:spyglass'))*(-2*v.first_person_rotation_factor + math.clamp(2 * math.sin(v.first_person_rotation_factor * math.pow(v.attack_time,0.85) * 112.0), 3, 999.0) * math.sin(v.first_person_rotation_factor * math.pow(v.attack_time,0.85) * 112.0))",
						"(!q.is_item_name_any('slot.weapon.mainhand','minecraft:trident','minecraft:spyglass'))*(math.sin(v.first_person_rotation_factor * math.pow(1.0 - math.pow(v.attack_time,0.85),2) * 280.0) * -5.5)"
					]
				}
			}
		},
		"animation.player.first_person.base_pose": {
			"loop": true,
			"blend_weight": "v.riptide_anim = q.can_damage_nearby_mobs > 0 && q.get_equipped_item_name != 'trident' && q.equipped_item_is_attachable(0) == 1;
			v.is_map_middle = q.get_equipped_item_name(0) == 'filled_map' && !q.is_item_name_any('slot.weapon.offhand', 0, 'minecraft:shield', 'minecraft:filled_map');
			v.is_map_right = q.get_equipped_item_name(0) == 'filled_map' && q.is_item_name_any('slot.weapon.offhand', 0, 'minecraft:shield', 'minecraft:filled_map');
			v.is_map_left = q.get_equipped_item_name(1) == 'filled_map';
			v.is_shield_adjust = q.is_item_name_any('slot.weapon.mainhand', 0, 'minecraft:shield', 'minecraft:filled_map') && q.get_equipped_item_name(1) == 'shield' && q.blocking;
			v.charge = (q.item_remaining_use_duration > 0 ? v.charge + q.delta_time : 0);
			v.bob = v.bob_animation * math.sin(q.life_time * 90);
			return 1;",
			"bones": {
				"body": {
					"rotation": [
						"q.target_x_rotation",
						"q.target_y_rotation",
						0.0
					]
				},
				"rightarm": {
					"position": [
						"v.riptide_anim ? 24",
						"v.riptide_anim ? 14 : q.get_equipped_item_name(0)==''",
						"v.riptide_anim ? 24"
					],
					"rotation": [
						"v.riptide_anim ? -30",
						"v.riptide_anim ? -100",
						"v.riptide_anim ? 150"
					]
				},
				"rightitem": {"scale": "v.riptide_anim ? 1.25 : 1"},
				"leftitem": {
					"position": [
						"q.can_damage_nearby_mobs > 0 && !q.blocking ? -20",
						"q.can_damage_nearby_mobs > 0 && !q.blocking ? 8",
						"q.can_damage_nearby_mobs > 0 && !q.blocking ? 15"
					],
					"rotation": [
						"q.can_damage_nearby_mobs > 0 && !q.blocking ? 30",
						"q.can_damage_nearby_mobs > 0 && !q.blocking ? -90",
						"q.can_damage_nearby_mobs > 0 && !q.blocking ? 150"
					]
				}
			}
		},
		"animation.player.first_person.crossbow_equipped": {
			"loop": true,
			"override_previous_animation": true,
			"bones": {
				"leftarm": {
					"position": [
						"1.5 - v.item_use_normalized * 3.5",
						"-20 * math.pow(math.cos(90*math.clamp(4*v.charge,0,1)),2) -1.799999952316284 + v.short_arm_offset_left * v.item_use_normalized * 3.5",
						"8.25 - (1 - v.item_use_normalized)"
					],
					"rotation": [
						165.0,
						-60.0,
						45.0
					],
					"scale": 0.4
				},
				"rightitem": {
					"position": [
						-8.0,
						4.0,
						"-7.0 + q.item_remaining_use_duration('main_hand', 1.0) * 1.5"
					],
					"rotation": [
						-20.0,
						-15.0,
						-30.0
					],
					"scale": [
						1.0,
						"1.0 + q.item_remaining_use_duration('main_hand', 1.0) * 0.15",
						1.0
					]
				},
				"leftitem": {
					"position": [
						2.5,
						-12,
						-9
					],
					"rotation": [
						0,
						0,
						90
					]
				}
			}
		},
		"animation.player.first_person.crossbow_hold": {
			"loop": true,
			"bones":{
				"rightitem": {
					"position": [4,0,2],
					"rotation": [0,0,-4],
					"scale": 1.2
				},
				"rightarm": {
					"position": [
						1,
						0,
						0
					],
					"rotation": [
						0,
						-5,
						0
					]
				}
			}
		},
		"animation.player.first_person.breathing_bob": {
			"loop": true,
			"bones": {
				"rightarm": {
					"rotation": [
						0,
						"v.bob * 0.5 * (1-v.is_map_middle-v.is_map_right)",
						0.0
					],
					"position": [
						0.0,
						"v.bob * 0.0025 * (1-v.is_map_middle-v.is_map_right)",
						0.0
					]
				},
				"leftarm": {
					"rotation": [
						0.0,
						"0.25* v.bob * (1-v.is_map_middle-v.is_map_left)",
						0.0
					],
					"position": [
						0.0,
						"0.000625 * v.bob * (1-v.is_map_middle-v.is_map_left)",
						0.0
					]
				}
			}
		},
		"animation.player.first_person.empty_hand": {
			"loop": true,
			"blend_weight": "1-v.riptide_anim",
			"bones": {
				"rightarm": {
					"position": [//the false here is testing - I want to see whether completely obliterating current animations
								 //could make things easier
						"false ? 7.1 : 13.5 + 2.5 * (q.get_equipped_item_name == 'trident' && !q.main_hand_item_use_duration > 0.0f && q.can_damage_nearby_mobs)",
						"false ? 0 : -10",
						"false ? 4 : 12.0"
					],
					"rotation": [
						"false ? 70 : 95.0",
						"false ? -20 : -45.0",
						"false ? 180 : 115.0"
					],
					"scale": "q.get_equipped_item_name == '' ? 1.15 : 1"//0.5 if doing the "false" type testing
				},
				"rightitem": {
					"position": [
						0.0,
						"q.get_equipped_item_name == 'spyglass' ? 4",
						"q.get_equipped_item_name == 'spyglass' ? -4"
					]
				},
				"leftitem": {
					"position": [
						"(q.get_equipped_item_name(1) == 'spyglass' ? -6)",
						"(q.get_equipped_item_name(1) == 'spyglass' ? 4 : q.get_default_bone_pivot('leftarm',1) - q.get_default_bone_pivot('leftitem',1) - 7.0)",
						"(q.get_equipped_item_name(1) == 'spyglass' ? 1 : -q.get_default_bone_pivot('leftitem',2))"
					],
					"rotation": [
						"(q.get_equipped_item_name(1) == 'spyglass' ? 60)",
						"0",
						"(q.get_equipped_item_name(1) == 'spyglass' ? 135)"
					],
					"scale": "q.get_equipped_item_name(0) == 'bow' && q.item_remaining_use_duration > 0 ? 0 : 1"
				}
			}
		},
		"animation.player.first_person.map_hold": {
			"loop": true,
			"bones": {
				"leftarm": {
					"position": [
						"-17 - 8 * v.map_angle",
						"-8.25 - 4 * v.map_angle",
						"12 - 16 * v.map_angle"
					],
					"rotation": [
						"160 - 120 * v.map_angle",
						15,
						30
					]
				},
				"rightarm": {
					"position": [
						"17 + 8 * v.map_angle",
						"-8.25 - 4 * v.map_angle",
						"12 - 16 * v.map_angle"
					],
					"rotation": [
						"160 - 120 * v.map_angle",
						-15,
						-30
					]
				},
				"root": {
					"position": [
						0,
						0,
						-0.5
					]
				}
			}
		},
		"animation.player.first_person.map_hold_attack": {
			"loop": true,
			"bones": {
				"leftarm": {
					"position": [
						"0.4*v.short_arm_offset_left-2 * v.first_person_rotation_factor",
						"0.2*v.short_arm_offset_left-4 * v.first_person_rotation_factor",
						0
					],
					"rotation": [
						"-10 * v.first_person_rotation_factor",
						0,
						0
					]
				},
				"rightarm": {
					"position": [
						"(1+2*v.map_angle)*math.sin(math.pow(variable.attack_time, 0.5) * 180.0) * -2.6",
						"(1-2*v.map_angle)*(7*math.pow(math.sin(v.first_person_rotation_factor * 90),2) + math.sin(math.pow(v.attack_time,0.85) * 360.0) * 2)",
						"(1+3*v.map_angle)*math.sin(math.pow(variable.attack_time, 1.1) * 180.0) * 3.1"
					],
					"rotation": [
						0,
						"(1-2*v.map_angle)*40 * v.first_person_rotation_factor",
						"(1-2*v.map_angle)*-15 * v.first_person_rotation_factor"
					],
					"scale": "1+0.2*math.sin(v.first_person_rotation_factor*180)"
				}
			}
		},
		"animation.player.first_person.map_hold_main_hand": {
			"loop": true,
			"bones": {
				"rightarm": {
					"position": [
						"16 + 6 - (v.first_person_rotation_factor * math.pow(v.attack_time,0.85) * 2)",
						"-10 + v.short_arm_offset_right + math.sin(v.first_person_rotation_factor * math.pow(1.0 - math.pow(v.attack_time,0.85),2) * 200.0) * 2.75 - v.first_person_rotation_factor * math.pow(v.attack_time,0.85) * 3.0",
						"12 + math.sin(v.first_person_rotation_factor * math.pow(v.attack_time,0.85) * 120.0) * 3.5"
					],
					"rotation": [
						75,
						-40,
						115
					]
				}
			}
		},
		"animation.player.first_person.map_hold_off_hand": {
			"loop": true,
			"bones": {
				"leftarm": {
					"position": [
						-17,
						"-8.25+0.5*v.short_arm_offset_left",
						"!q.item_is_charged(0) ? 11.50"
					],
					"rotation": [
						195.0,
						182.5,
						2.5
					],
					"scale": 0.75
				}
			}
		},
		"animation.player.first_person.swap_item": {
			"loop": true,
			"bones": {
				"leftarm": {
					"position": [
						0,
						"-10 * (1 - c.player_offhand_arm_height) - 10 * (1-v.player_arm_height) * (q.get_equipped_item_name(0) == 'filled_map' && !q.is_item_name_any('slot.weapon.offhand', 0, 'minecraft:shield', 'minecraft:filled_map'))",
						0
					],
					"scale": "q.get_equipped_item_name(1) == 'spyglass' && q.main_hand_item_use_duration > 0 ? 0 : 1"
				},
				"rightarm": {
					"position": [
						0,
						"(q.main_hand_item_use_duration > 0.0f) * -20 * math.pow(math.cos(90*math.clamp(4*v.charge,0,1)),2) -10 * (1 - v.player_arm_height + (v.is_map_right+(q.get_equipped_item_name(0)=='crossbow')) * (1 - c.player_offhand_arm_height)) + 10 * (1-c.player_offhand_arm_height) * v.is_shield_adjust",
						0
					]
				}
			}
		},
		"animation.player.first_person.walk": {
			"loop": true,
			"bones": {
				"rightarm": {
					"position": [
						"0.5 * v.is_map_right * math.sin(-query.walk_distance * 180.0) * v.hand_bob * 9.75",
						"0.5 * v.is_map_right * -math.abs(math.cos(-query.walk_distance * 180.0)) * v.hand_bob * 15.0 + v.short_arm_offset_right",
						0.0
					]
				},
				"leftarm": {
					"position": [
						0,
						"v.short_arm_offset_left",
						0
					]
				}
			}
		}
	}
}