{
	"format_version": "1.16.0",
	"animations": {
		"animation.player.first_person.attack_rotation": {
			"loop": true,
			"animation_length": 0.55,
			"anim_time_update": "(variable.attack_time * 0.55)",
			"bones": {
				"rightarm": {
					"position": [
						"query.get_equipped_item_name == '' ? -math.clamp(-15.5 * math.sin(variable.first_person_rotation_factor * variable.attack_time * 112.0), -7.0, 999.0) * math.sin(variable.first_person_rotation_factor * variable.attack_time * 112.0) : 0",
						"query.get_equipped_item_name == '' ? math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 200.0) * 7.5 - variable.first_person_rotation_factor * variable.attack_time * 15.0 + variable.short_arm_offset_right : -(10 + 15 * (query.get_equipped_item_name != 'trident')) * math.sin(variable.attack_time * variable.first_person_rotation_factor * 200)",
						"query.get_equipped_item_name == '' ? math.sin(variable.first_person_rotation_factor * variable.attack_time * 120.0) * 1.75"
					],
					"rotation": [
						"query.get_equipped_item_name == '' ? -0.25 * math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 280.0) * -60.0",
						"query.get_equipped_item_name == '' ? 0.25 * math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 280.0) * 40.0",
						"query.get_equipped_item_name == '' ? 2 * math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 280.0) * 20.0"
					]
				}
			}
		},
		"animation.player.first_person.attack_rotation_item": { 
			"loop": true,
			"override_previous_animation": true,
			"bones": {
				"rightitem": {
					"rotation": [
						"0.5 * math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 200.0) * 20 * (q.get_equipped_item_name != 'trident')",
						"0.5 * -math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 200.0) * -48",
						"0.5 * math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 200.0) * (-70 - 10 * (q.get_equipped_item_name == 'trident'))"
					],
					"position": [
						"0.5 * 1 * math.clamp(-15.5 * math.sin(variable.first_person_rotation_factor * variable.attack_time * 112.0), 12, 999.0) * math.sin(variable.first_person_rotation_factor * variable.attack_time * 112.0)",
						"0.5 * -1 * math.clamp(2 * math.sin(variable.first_person_rotation_factor * variable.attack_time * 112.0), 3, 999.0) * math.sin(variable.first_person_rotation_factor * variable.attack_time * 112.0) - (math.sin(variable.attack_time*3.14))*(math.sin(variable.attack_time*3.14)) *-60*(query.get_equipped_item_name('main_hand') == 'trident'? 1.0:0.0)",
						"0.5 * 0 * math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 280.0) * -11"
					]
				},
				"rightarm": {
					"position": [
						"0.5 * math.clamp(-15.5 * math.sin(variable.first_person_rotation_factor * variable.attack_time * 112.0), -7.0, 999.0) * math.sin(variable.first_person_rotation_factor * variable.attack_time * 112.0)",
						"0.5 * math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 200.0) * 7.5 - variable.first_person_rotation_factor * variable.attack_time * 15.0 + variable.short_arm_offset_right",
						"0.5 * math.sin(variable.first_person_rotation_factor * variable.attack_time * 120.0) * 1.75"
					],
					"rotation": [
						"0.5 * -math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 280.0) * -60.0",
						"0.5 * math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 280.0) * 40.0",
						"0.5 * -math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 280.0) * 20.0"
					]
				}
			}
		},
		"animation.player.first_person.base_pose": {
			"loop": true,
			"bones": {
				"body": {
					"rotation": [
						"query.target_x_rotation",
						"query.target_y_rotation",
						0.0
					]
				},
				"rightarm": {
					"position": [
						0,
						0,
						0
					]
				},
				"leftarm": {
					"position": [
						0,
						0,
						0
					],
					"scale": [
						1,
						"query.get_equipped_item_name(1) == 'trident' ? -1 : 1",
						1
					]
				}
			}
		},
		"animation.player.first_person.crossbow_equipped": {
			"loop": true,
			"override_previous_animation": true,
			"bones": {
				"rightitem": {
					"position": [
						-4,
						"-6 + 4 * math.sin(q.life_time * 1500) * math.sin(math.pi * query.item_remaining_use_duration('main_hand', 1.0)) + 32*math.hermite_blend(math.clamp(4 * (q.item_remaining_use_duration) - 4,0,1))",
						"-5.0 + query.item_remaining_use_duration('main_hand', 1.0) * 1.5"
					],
					"rotation": [
						-15,
						-15,
						-15
					],
					"scale": [
						1.75,
						"1.75 + query.item_remaining_use_duration('main_hand', 1.0) * 0.25",
						-1.75
					]
				},
				"leftarm": {
					"position": [
						"math.lerp(-2,2,q.item_remaining_use_duration)",
						"math.lerp(0,0,q.item_remaining_use_duration)",
						"math.lerp(4,6,q.item_remaining_use_duration)"
					],
					"rotation": [
						"math.lerp(100,60,q.item_remaining_use_duration)",
						"math.lerp(-30,-20,q.item_remaining_use_duration)",
						"math.lerp(-20,0,q.item_remaining_use_duration)"
					],
					"scale":0.75
				},
				"leftitem":{"scale":0}
			}
		},
		"animation.player.first_person.crossbow_hold": {
			"loop": true,
			"bones": {"rightitem":{"position": ["v.is_charged_middle",0,0],"scale": "1 + 0.1 * v.is_charged_middle"}}
		},
		"animation.player.first_person.breathing_bob": {
			"loop": true,
			"bones": {
				"rightarm": {
					"position": [
						0.0,
						"variable.bob_animation * math.sin(q.life_time * 45.0) * 0.25 * (query.get_equipped_item_name(0) != 'filled_map')",
						0.0
					]
				},
				"leftarm": {
					"position": [
						0.0,
						"variable.bob_animation * math.sin(q.life_time * 45.0) * 0.25 * (query.get_equipped_item_name(1) != 'filled_map') * (query.get_equipped_item_name(0) != 'filled_map') * (1 - 0.8 * (query.get_equipped_item_name(0) == '')) ",
						0.0
					]
				},
				"rightitem": {
					"position": [
						"query.get_equipped_item_name == 'crossbow' ? 1",
						0,
						"query.get_equipped_item_name == 'crossbow' ? 1"
					]
				}
			}
		},
		"animation.player.first_person.empty_hand": {
			"loop": true,
			"bones": {
				"rightarm": {
					"position": [
						"v.is_charged_middle = q.get_equipped_item_name(1) != 'shield' && q.item_is_charged(0); 
						return v.is_charged_middle ? 13.5: -6;",
						-10,
						12.0
					],
					"rotation": [
						95.0,
						-45.0,
						"v.is_charged_middle ? 115 : 75.0 + 45 * (q.get_equipped_item_name(0) != '')"
					],
					"scale": "q.get_equipped_item_name == '' ? 1.2 : 1"
				},
				"rightitem": {
					"position": [
						"q.get_equipped_item_name(0) == 'bow' && q.item_remaining_use_duration > 0 ? -2",
						"query.get_equipped_item_name == 'spyglass' ? 4 : (q.get_equipped_item_name(0) == 'bow' && q.item_remaining_use_duration > 0 ? -4 : (q.get_default_bone_pivot('rightarm',1) - q.get_default_bone_pivot('rightitem',1) - 7.0))",
						"query.get_equipped_item_name == 'spyglass' ? -4 : -q.get_default_bone_pivot('rightitem',2)"
					],
					"scale":"q.get_equipped_item_name(0) == 'spyglass' ? 1.4 : 1"
				},
				"leftitem": {
					"position": [
						"q.get_equipped_item_name(1) == 'spyglass' ? -6",
						"q.get_equipped_item_name(1) == 'spyglass' ? 4 : q.get_default_bone_pivot('leftarm',1) - q.get_default_bone_pivot('leftitem',1) - 7.0",
						"q.get_equipped_item_name(1) == 'spyglass' ? 1 : -q.get_default_bone_pivot('leftitem',2)"
					],
					"rotation": [
						"q.get_equipped_item_name(1) == 'spyglass' ? 60",
						0,
						"q.get_equipped_item_name(1) == 'spyglass' ? 135"
					],
					"scale": [
						"query.get_equipped_item_name(0) == 'bow' && query.item_remaining_use_duration > 0 ? 0 : 1",
						"query.get_equipped_item_name(0) == 'bow' && query.item_remaining_use_duration > 0 ? 0 : 1",
						"query.get_equipped_item_name(0) == 'bow' && query.item_remaining_use_duration > 0 ? 0 : 1"
					]
				}
			}
		},
		"animation.player.first_person.map_hold": {
			"loop": true,
			"bones": {
				"leftarm": {
					"position": [
						"-17 - 8 * variable.map_angle",
						"-8.25 - 4 * variable.map_angle",
						"12 - 16 * variable.map_angle"
					],
					"rotation": [
						"160 - 120 * variable.map_angle",
						15,
						30
					]
				},
				"rightarm": {
					"position": [
						"17 + 8 * variable.map_angle",
						"-8.25 - 4 * variable.map_angle",
						"12 - 16 * variable.map_angle"
					],
					"rotation": [
						"160 - 120 * variable.map_angle",
						-15,
						-30
					]
				}
			}
		},
		"animation.player.first_person.map_hold_attack": {
			"loop": true,
			"bones": {
				"leftarm": {
					"position": [
						"-2 * variable.first_person_rotation_factor",
						"-4 * variable.first_person_rotation_factor",
						0
					],
					"rotation": [
						"-10 * variable.first_person_rotation_factor",
						0,
						0
					]
				},
				"rightarm": {
					"position": [
						"(-16 * math.clamp(2 * v.first_person_rotation_factor, 0, 1) * (math.clamp(24 * v.map_angle, 0, 1)) + math.sin(variable.first_person_rotation_factor * variable.attack_time * 112.0)) * 2 * (1-math.clamp(20 * v.map_angle, 0, 1))",
						"math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 200.0) * 8 + variable.short_arm_offset_right",
						"math.sin(variable.first_person_rotation_factor * variable.attack_time * 120.0) * 4 * (1-math.clamp(20 * v.map_angle, 0, 1))"
					],
					"rotation": [
						0,
						"40 * v.first_person_rotation_factor",
						"-15 * variable.first_person_rotation_factor"
					],
					"scale": "1 + 0.025 * v.first_person_rotation_factor * math.abs(v.attack_body_rot_y) + 4 * math.sin(v.first_person_rotation_factor * v.attack_time * math.pi)"
				}
			}
		},
		"animation.player.first_person.map_hold_main_hand": {
			"loop": true,
			"bones": {
				"rightarm": {
					"position": [
						"18 + 6 - (variable.first_person_rotation_factor * variable.attack_time * 2)",
						"-10 + variable.short_arm_offset_right + math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 200.0) * 2.75 - variable.first_person_rotation_factor * variable.attack_time * 3.0",
						"12 + math.sin(variable.first_person_rotation_factor * variable.attack_time * 120.0) * 3.5"
					],
					"rotation": [
						75,
						-40,
						115
					]
				}
			}
		},
		"animation.player.first_person.map_hold_off_hand": {
			"loop": true,
			"bones": {
				"leftarm": {
					"position": [
						-18,
						-8.25,
						"query.get_equipped_item_name(0) == 'crossbow' && query.item_is_charged(0) ? 0 : 11.50"
					],
					"rotation": [
						195.0,
						182.5,
						2.5
					],
					"scale": 0.75
				}
			}
		},
		"animation.player.first_person.swap_item": {
			"loop": true,
			"bones": {
				"leftarm": {
					"position": [
						0.0,
						"-10.0 * (1.0 - c.player_offhand_arm_height) -10 * (1.0 - v.player_arm_height) * (q.get_equipped_item_name(0) == 'filled_map') * (q.get_equipped_item_name(1) != 'filled_map')",
						0.0
					]
				},
				"rightarm": {
					"position": [
						0.0,
						"((q.get_equipped_item_name(0) == 'filled_map' && q.is_item_name_any('slot.weapon.offhand', 0, 'minecraft:shield', 'minecraft:filled_map'))? -10.0 * (1.0 - c.player_offhand_arm_height)) -10.0 * (1.0 - variable.player_arm_height) + 1 * (q.get_equipped_item_name(0) == '') + 10 * (1-c.player_offhand_arm_height) * (q.get_equipped_item_name(0) == 'shield' && q.get_equipped_item_name(1) == 'shield' && q.blocking) - 1.25 * (query.get_equipped_item_name == 'bow' && query.main_hand_item_use_duration > 0 ? 100 * math.sin(2 * math.pi * math.clamp((1 - (query.main_hand_item_max_duration - (query.main_hand_item_use_duration - query.frame_alpha + 1.0)) / 5.0), 0.0, 1.0f)))",
						0.0
					]
				}
			}
		},
		"animation.player.first_person.vr_attack_rotation": {
			"loop": true,
			"bones": {
				"rightarm": {
					"position": [
						"5.0 * math.sin(variable.first_person_rotation_factor * variable.attack_time * 112.0)",
						"(math.sin(variable.first_person_rotation_factor * (1.0 - variable.attack_time) * (1.0 - variable.attack_time) * 200.0) - 0.8) * 8.75 + 5.0",
						"math.sin(variable.first_person_rotation_factor * variable.attack_time * 120.0) * 15.0"
					],
					"rotation": [
						"30.7 * math.sin(variable.first_person_rotation_factor * variable.attack_time * -180.0 - 45.0) * 1.5",
						0.0,
						"21.8 * math.sin(variable.first_person_rotation_factor * variable.attack_time * 200.0 + 30.0) * 1.25"
					]
				}
			}
		},
		"animation.player.first_person.walk": {}
	}
}